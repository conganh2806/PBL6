// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webnovel.API.Databases;

#nullable disable

namespace Webnovel.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Bookmarked", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChapterId")
                        .IsUnique();

                    b.ToTable("BookMarked");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<long>("FeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileContent")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NovelId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeeId");

                    b.HasIndex("NovelId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Comment", b =>
                {
                    b.Property<string>("NovelId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("NovelId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.ExceptionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<string>("InnerException")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("Id");

                    b.ToTable("ExceptionLogs");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.NovelGenre", b =>
                {
                    b.Property<long>("GenreId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("NovelId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("GenreId", "NovelId");

                    b.HasIndex("NovelId");

                    b.ToTable("GenreOfNovels");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Preferences", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("NovelId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("AccountId", "NovelId");

                    b.HasIndex("NovelId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.RolesOfUser", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("RoleId")
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)")
                        .HasColumnOrder(2);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("AccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesOfUsers");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.UpdatedFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<float>("Fee")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("Id");

                    b.ToTable("UpdatedFee");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<DateOnly>("DateJoined")
                        .HasColumnType("date");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerifyEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<float>("WalletAmmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Novel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(1)
                        .HasComment("Id định danh (khóa chính)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Novel");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Rating", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("NovelId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày tạo dữ liệu");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("tinyint(1)")
                        .HasComment("Cờ xóa dữ liệu");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày xoá dữ liệu");

                    b.Property<float>("RateScore")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("Ngày cập nhật dữ liệu");

                    b.HasKey("AccountId", "NovelId");

                    b.HasIndex("NovelId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Bookmarked", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entitites.Account", "Account")
                        .WithMany("Bookmarkeds")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entities.Chapter", "Chapter")
                        .WithOne("Bookmarked")
                        .HasForeignKey("WebNovel.API.Databases.Entities.Bookmarked", "ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Chapter", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entities.UpdatedFee", "UpdatedFee")
                        .WithMany("Chapters")
                        .HasForeignKey("FeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entitites.Novel", "Novel")
                        .WithMany("Chapters")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");

                    b.Navigation("UpdatedFee");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Comment", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entitites.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entitites.Novel", "Novel")
                        .WithMany("Comments")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.NovelGenre", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entities.Genre", "Genre")
                        .WithMany("Novels")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entitites.Novel", "Novel")
                        .WithMany("Genres")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Preferences", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entitites.Account", "Account")
                        .WithMany("Preferences")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entitites.Novel", "Novel")
                        .WithMany("Preferences")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.RolesOfUser", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entitites.Account", "Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Novel", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entitites.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Rating", b =>
                {
                    b.HasOne("WebNovel.API.Databases.Entitites.Account", "Account")
                        .WithMany("Ratings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebNovel.API.Databases.Entitites.Novel", "Novel")
                        .WithMany("Ratings")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Chapter", b =>
                {
                    b.Navigation("Bookmarked");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Genre", b =>
                {
                    b.Navigation("Novels");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entities.UpdatedFee", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Account", b =>
                {
                    b.Navigation("Bookmarkeds");

                    b.Navigation("Comments");

                    b.Navigation("Preferences");

                    b.Navigation("Ratings");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WebNovel.API.Databases.Entitites.Novel", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Comments");

                    b.Navigation("Genres");

                    b.Navigation("Preferences");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
